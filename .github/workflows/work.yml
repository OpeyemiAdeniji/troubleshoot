name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

env:
  PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
  PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}

jobs:
  generate_token:
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.get_token.outputs.access_token }}
    steps:
      - name: Generate Access Token
        id: get_token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          echo "Generating access token..."
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          
          echo "Auth response: $response"
          ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken')
          
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" == "null" ]; then
            echo "Failed to generate access token"
            exit 1
          fi
          
          # Store token with Bearer prefix
          echo "access_token=Bearer $ACCESS_TOKEN" >> $GITHUB_OUTPUT
          echo "Token generated successfully"

  push_playlist_to_port:
    needs: generate_token
    runs-on: ubuntu-latest
    env:
      PLAYLIST_ID: ${{ inputs.playlistid }}
      ACCESS_TOKEN: ${{ needs.generate_token.outputs.access_token }}
    steps:
      - name: Debug Token
        run: |
          echo "Access Token (first 10 chars): ${ACCESS_TOKEN:0:10}..."
          
      - name: Push Playlist Data to Port
        run: |
          # Test playlist data
          playlist_entity='{"identifier":"PLTwEf67PTkOvH2z55uxJr0ftc7qUHwK6A","title":"ðŸŽ“ Port Academy","properties":{"playlistId":"PLTwEf67PTkOvH2z55uxJr0ftc7qUHwK6A","title":"ðŸŽ“ Port Academy","description":"The Port academy will teach you all there is to know about Port, from the basic premise and core concepts, all the way to complete live demonstrations","thumbnailUrl":"https://i.ytimg.com/vi/z2kR9HSRIpQ/default.jpg","videoCount":13,"created_at":"2023-04-24T13:18:19Z"}}'
          
          echo "Making request to Port API..."
          echo "Using Authorization header: ${ACCESS_TOKEN:0:20}..."
          
          # Make the API call with explicit headers and debug output
          response=$(curl -v -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity" 2>&1)
          
          echo "Full API Response:"
          echo "$response"
          
          # Check if response contains error
          if echo "$response" | grep -q "unauthorized"; then
            echo "Authorization failed. Please check token format and validity."
            echo "Token being used: ${ACCESS_TOKEN:0:10}..."
            exit 1
          fi
          
          # Check HTTP status code
          if echo "$response" | grep -q "HTTP/[0-9.]* 2[0-9][0-9]"; then
            echo "Successfully pushed playlist to Port"
          else
            echo "Failed to push playlist to Port"
            exit 1
          fi

      - name: Send Status to Port
        if: always()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          STATUS_MESSAGE="Playlist push attempt completed"
          
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: ${ACCESS_TOKEN}" \
            -d "{
              \"message\": \"$STATUS_MESSAGE\",
              \"statusLabel\": \"${{ job.status }}\"
            }"
