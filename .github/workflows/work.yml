name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

env:
  PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
  PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}

jobs:
  generate_token:
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.get_token.outputs.access_token }}
    steps:
      - name: Generate Access Token
        id: get_token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken')
          # Add Bearer prefix to token
          ACCESS_TOKEN="Bearer ${ACCESS_TOKEN}"
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

  fetch_playlist_metadata:
    needs: generate_token
    runs-on: ubuntu-latest
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
      ACCESS_TOKEN: ${{ needs.generate_token.outputs.access_token }}
    outputs:
      playlist_id: ${{ steps.fetch_metadata.outputs.PLAYLIST_ID }}
      playlist_data: ${{ steps.fetch_metadata.outputs.PLAYLIST_DATA }}
    steps:
      - name: Send Start Logs to Port
        id: start_log
        run: |
          set -e
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d '{
              "message": "Metadata fetch of playlist has commenced PLAYLIST_ID - '$PLAYLIST_ID'",
              "statusLabel": "Fetching Playlist"
            }'

      - name: Fetch YouTube Playlist Metadata
        id: fetch_metadata
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          playlist_id=$(echo $playlist_response | jq -r '.items[0].id')
          
          if [ -z "$playlist_id" ]; then
            echo "Failed to fetch playlist details. Exiting."
            exit 1
          fi
          playlist_data=$(echo $playlist_response | jq -c '.items[0] | {
            identifier: .id,
            title: .snippet.title,
            properties: {
              playlistId: .id,
              title: .snippet.title,
              description: .snippet.description,
              thumbnailUrl: .snippet.thumbnails.default.url,
              videoCount: .contentDetails.itemCount,
              created_at: .snippet.publishedAt
            }
          }')
          echo "PLAYLIST_ID=$playlist_id" >> $GITHUB_OUTPUT
          echo "PLAYLIST_DATA=$playlist_data" >> $GITHUB_OUTPUT

      - name: Send Completion Logs to Port
        if: success()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d '{
              "message": "Successfully fetched playlist metadata PLAYLIST_ID - '$PLAYLIST_ID'",
              "statusLabel": "Playlist Fetched"
            }'

  push_playlist_to_port:
    needs: [generate_token, fetch_playlist_metadata]
    runs-on: ubuntu-latest
    env:
      PLAYLIST_ID: ${{ inputs.playlistid }}
      ACCESS_TOKEN: ${{ needs.generate_token.outputs.access_token }}
    steps:
      - name: Send Start Logs to Port
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d '{
              "message": "ingesting playlist data to Port has commenced PLAYLIST_ID - '$PLAYLIST_ID'",
              "statusLabel": "ingesting Playlist to Port"
            }'

      - name: Push Playlist Data to Port
        run: |
          playlist_entity='${{ needs.fetch_playlist_metadata.outputs.playlist_data }}'
          
          response=$(curl -s -w "%{http_code}" -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity")
          
          status_code="${response: -3}"
          response_body="${response:0:-3}"
          
          echo "Status code: $status_code"
          echo "Response body: $response_body"
          
          if [[ "$status_code" != "200" && "$status_code" != "201" ]]; then
            echo "Failed to push playlist to Port. Status code: $status_code"
            echo "Response body: $response_body"
            exit 1
          fi

      - name: Send Completion Logs to Port
        if: success()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d '{
              "message": "Successfully ingested playlist data to Port PLAYLIST_ID - '$PLAYLIST_ID'",
              "statusLabel": "Playlist ingested"
            }'

# Rest of the workflow remains the same...
