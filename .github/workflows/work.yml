name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

env:
  PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
  PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}

jobs:
  prepare_data:
    runs-on: ubuntu-latest
    steps:
      - name: Create Data Directory
        run: mkdir -p data
      
      - name: Generate Access Token
        id: get_token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          
          ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken')
          echo "Bearer $ACCESS_TOKEN" > data/token.txt
          
      - name: Prepare Playlist Data
        run: |
          # Your test playlist data
          echo '{"identifier":"PLTwEf67PTkOvH2z55uxJr0ftc7qUHwK6A","title":"ðŸŽ“ Port Academy","properties":{"playlistId":"PLTwEf67PTkOvH2z55uxJr0ftc7qUHwK6A","title":"ðŸŽ“ Port Academy","description":"The Port academy will teach you all there is to know about Port, from the basic premise and core concepts, all the way to complete live demonstrations","thumbnailUrl":"https://i.ytimg.com/vi/z2kR9HSRIpQ/default.jpg","videoCount":13,"created_at":"2023-04-24T13:18:19Z"}}' > data/playlist.json

      - name: Upload Data Artifact
        uses: actions/upload-artifact@v3
        with:
          name: port-data
          path: data/
          retention-days: 1

  push_to_port:
    needs: prepare_data
    runs-on: ubuntu-latest
    steps:
      - name: Download Data Artifact
        uses: actions/download-artifact@v3
        with:
          name: port-data
          path: data

      - name: Push Data to Port
        run: |
          # Read token and data from files
          ACCESS_TOKEN=$(cat data/token.txt)
          PLAYLIST_DATA=$(cat data/playlist.json)
          
          echo "Pushing data to Port..."
          
          # Make the API call
          response=$(curl -s -w "\n%{http_code}" "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "@data/playlist.json")
          
          # Get status code from last line
          status_code=$(echo "$response" | tail -n1)
          # Get response body without status code
          body=$(echo "$response" | sed '$d')
          
          echo "Status code: $status_code"
          echo "Response body: $body"
          
          if [[ "$status_code" != "200" && "$status_code" != "201" ]]; then
            echo "Failed to push data to Port"
            exit 1
          fi
          
          echo "Successfully pushed data to Port"

      - name: Send Status to Port
        if: always()
        run: |
          ACCESS_TOKEN=$(cat data/token.txt)
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: $ACCESS_TOKEN" \
            -d "{
              \"message\": \"Playlist push completed with status: ${{ job.status }}\",
              \"statusLabel\": \"${{ job.status }}\"
            }"

  cleanup:
    needs: push_to_port
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Delete Artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: port-data
