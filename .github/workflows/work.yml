name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:

  setup_environment:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install jq for JSON processing
        run: sudo apt-get install jq
      
      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

  fetch_playlist_metadata:
    runs-on: ubuntu-latest
    needs: setup_environment
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      playlist_id: ${{ steps.fetch_metadata.outputs.PLAYLIST_ID }}
      playlist_data: ${{ steps.fetch_metadata.outputs.PLAYLIST_DATA }}
    steps:
      - name: Fetch YouTube Playlist Metadata
        id: fetch_metadata
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          playlist_id=$(echo $playlist_response | jq -r '.items[0].id')
          
          if [ -z "$playlist_id" ]; then
            echo "Failed to fetch playlist details. Exiting."
            exit 1
          fi
          playlist_data=$(echo $playlist_response | jq -c '.items[0] | {
            identifier: .id,
            title: .snippet.title,
            properties: {
              playlistId: .id,
              title: .snippet.title,
              description: .snippet.description,
              thumbnailUrl: .snippet.thumbnails.default.url,
              videoCount: .contentDetails.itemCount,
              created_at: .snippet.publishedAt
            }
          }')
          echo "PLAYLIST_ID=$playlist_id" >> $GITHUB_OUTPUT
          echo "PLAYLIST_DATA=$playlist_data" >> $GITHUB_OUTPUT

  push_playlist_to_port:
    needs: [setup_environment, fetch_playlist_metadata]
    runs-on: ubuntu-latest
    steps:
      - name: Push Playlist Data to Port
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
          PLAYLIST_ID: ${{ inputs.playlistid }}
          PLAYLIST_DATA: ${{ needs.fetch_playlist_metadata.outputs.playlist_data }}
        run: |
          response=$(curl -s -w "%{http_code}" -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PLAYLIST_DATA")
          
          http_code=$(echo "$response" | tail -n1)
          if [[ ! "$http_code" =~ ^2[0-9][0-9]$ ]]; then
            echo "Failed to push playlist to Port. HTTP code: $http_code"
            echo "Response Body: $(echo "$response" | head -n -1)"
            exit 1
          fi
